import telebot
import sqlite3
import datetime
import threading
import time

TOKEN = "8382276088:AAE3ppduJpyvZ1Cs-wHgCokjl2hkkL58gso"
bot = telebot.TeleBot(TOKEN)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ---
def init_db():
    conn = sqlite3.connect("homework.db")
    cur = conn.cursor()
    cur.execute("DROP TABLE IF EXISTS homework")  # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ
    cur.execute("""
        CREATE TABLE homework (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT,
            date TEXT,
            UNIQUE(user_id, date) ON CONFLICT REPLACE
        )
    """)
    conn.commit()
    conn.close()

init_db()

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –î–ó ---
@bot.message_handler(commands=["add"])
def add_homework(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n—Ç–µ–∫—Å—Ç;–î–î.–ú–ú.–†–†–†–†")

@bot.message_handler(func=lambda m: ";" in m.text)
def save_homework(message):
    try:
        text, date_str = message.text.split(";")
        date_obj = datetime.datetime.strptime(date_str.strip(), "%d.%m.%Y").date()

        conn = sqlite3.connect("homework.db")
        cur = conn.cursor()
        cur.execute("INSERT OR REPLACE INTO homework (user_id, text, date) VALUES (?, ?, ?)",
                    (message.chat.id, text.strip(), str(date_obj)))
        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ {date_obj} –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π —Ç–∞–∫: –¢–µ–∫—Å—Ç;01.10.2025")

# --- –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –î–ó ---
@bot.message_handler(commands=["list"])
def list_homework(message):
    conn = sqlite3.connect("homework.db")
    cur = conn.cursor()
    cur.execute("SELECT text, date FROM homework WHERE user_id=? ORDER BY date", (message.chat.id,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "üì≠ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å")
    else:
        msg = "üìö –¢–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è:\n"
        for text, date in rows:
            msg += f"üîπ {text} (–¥–æ {date})\n"
        bot.send_message(message.chat.id, msg)

# --- –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ---
@bot.message_handler(commands=["today"])
def today_homework(message):
    today = datetime.date.today()
    conn = sqlite3.connect("homework.db")
    cur = conn.cursor()
    cur.execute("SELECT text FROM homework WHERE user_id=? AND date=?", (message.chat.id, str(today)))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "üì≠ –°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î")
    else:
        msg = f"üìÖ –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today}):\n"
        for text, in rows:
            msg += f"üîπ {text}\n"
        bot.send_message(message.chat.id, msg)

# --- –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É ---
@bot.message_handler(commands=["date"])
def date_homework(message):
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            raise ValueError
        date_obj = datetime.datetime.strptime(parts[1], "%d.%m.%Y").date()

        conn = sqlite3.connect("homework.db")
        cur = conn.cursor()
        cur.execute("SELECT text FROM homework WHERE user_id=? AND date=?", (message.chat.id, str(date_obj)))
        rows = cur.fetchall()
        conn.close()

        if not rows:
            bot.send_message(message.chat.id, f"üì≠ –ù–∞ {date_obj} –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î")
        else:
            msg = f"üìÖ –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ {date_obj}:\n"
            for text, in rows:
                msg += f"üîπ {text}\n"
            bot.send_message(message.chat.id, msg)
    except Exception:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /date –î–î.–ú–ú.–†–†–†–†")

# --- –§–æ–Ω–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è ---
def check_homework():
    while True:
        today = datetime.date.today()
        conn = sqlite3.connect("homework.db")
        cur = conn.cursor()
        cur.execute("SELECT user_id, text FROM homework WHERE date=?", (str(today),))
        rows = cur.fetchall()
        conn.close()

        for user_id, text in rows:
            bot.send_message(user_id, f"üìå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –°—å–æ–≥–æ–¥–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ: {text}")

        time.sleep(3600)  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–≥–æ–¥–∏–Ω–∏

threading.Thread(target=check_homework, daemon=True).start()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.polling(none_stop=True)
